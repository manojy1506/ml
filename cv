{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMkxwWtUQ/XIVWSVfOeyxSU",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/manojy1506/ml/blob/main/cv\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "vGGkdPFM_PUC",
        "outputId": "475305fd-9d5f-411e-a038-d7381a91be0b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=900x600 at 0x7FB4F6AAC050>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import cv2 as cv\n",
        "import numpy as np\n",
        "from google.colab.patches import cv_imshow\n",
        "cv_imshow(img)\n",
        "\n",
        "img = np.zeros((600, 900, 3), dtype=np.uint8)\n",
        "#background\n",
        "cv.rectangle(img, (0,0),(900,500),(255,225,85), -1)\n",
        "cv.rectangle(img, (0,500),(900,600),(75,180,70), -1)\n",
        "#sun\n",
        "cv.circle(img, (200,150), 60, (0,255,255), -1)\n",
        "cv.circle(img, (200,150), 75, (220,255,255), 10)\n",
        "\n",
        "# *** TREE 1 ***\n",
        "#tree stem\n",
        "cv.line(img, (710, 500), (710, 420), (30,65,155), 15)\n",
        "#tree leafs\n",
        "triangle2 = np.array([[640,460],[780,460], [710,200]], dtype=np.int32)\n",
        "cv.fillPoly(img, [triangle2], (75,180,70))\n",
        "\n",
        "# *** TREE 2 ***\n",
        "#tree stem\n",
        "cv.line(img, (600, 500), (600, 420), (30,65,155), 25)\n",
        "#tree leafs\n",
        "triangle = np.array([[500,440],[700,440], [600,75]], dtype=np.int32)\n",
        "cv.fillPoly(img, [triangle], (75,200,70))\n",
        "\n",
        "#text\n",
        "font = cv.FONT_HERSHEY_SCRIPT_SIMPLEX\n",
        "cv.putText(img, \"I Love Python\", (120,490), font, 1.5, (255,255,255), 2)\n",
        "\n",
        "cv.waitKey(0)\n",
        "cv.destroyAllWindows()"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "xJduLNUR_zc3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "lZEdM1GU_xol"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}